# NOTE: openvpn.yml.template should be deployed before grafana.yml.template.
# When this stack is re-deployed, the grafana stack should also be re-deployed.
#
# = Template to create the OpenVPN stack for the
# Dockstore VPN server. This script will create
# necessary network infrastructure and an EC2
# instance to run the OpenVPN server. The EC2
# instance creates certificates/keys and uploads
# them to an S3 bucket in a zip file, and emails
# the user a presigned S3 bucket URL that links to
# a zip file containing their VPN credentials.
#
# What you do:
# - set name (prefix for naming vpn resources)
# - set certificate owner info
# - set vpn configuration options (protocol/port)
#
# What the script does:
# 1. Create VPN network infrastructure
#   a. VPC
#   b. public subnet
#   c. internet gateway
#   d. route table
#   e. route-subnet association
#   f. elastic ip
#   g. security group
#   h. iam access policies
#   i. ec2 instance role
#   j. ec2 instance profile
#   k. s3 access policy
#   l. s3 bucket
#   m. ssm command docs to create/delete vpn users
#   n. ec2 instance
#   o. ssm parameter to store the VPN bucket
# 2. Configure the OpenVPN EC2 instance
#   a. configure cloudformation on instance
#   b. install software
#   c. generate server files (secrets)
#   d. generate client files (grafana)
#   e. configure openvpn server
#   f. zip openvpn files
#   g. upload zip file to s3 bucket
#
# What you end up with:
# - Outputs: Name of S3 bucket with VPN credentials, CIDR prefix for VPN network,
#   and IP address of OpenVPN server.
# - Operators can use the SSM Run Command documents to create or delete users.
#   Users will receive emails with presigned S3 bucket URLs linking to a zip file
#   with their certificates and keys.

Description: OpenVPN Stack

Parameters:
  VpcName:
    Description: The name of the VPC.
    Type: String
    MinLength: 1
    Default: dockstore_vpn_simple

  VpnOwner:
    Description: Email address to assign as a value for Owner tag on all infrastructure.
    Type: String
    Default: chmreid@ucsc.edu

  DockstoreVpnInstanceType:
    Description: The instance type of the EC2 node running the OpenVPN server.
    Type: String
    Default: t2.micro

  # Note: check this does not overlap with CidrPrefix variable in core.yml
  DockstoreVpnCidrPrefixVpc:
    Description: Starting portion of VPC network CIDR block.
    Type: String
    Default: '10.2'
    AllowedValues:
      - '10.2'
      - '172.18'

  DockstoreVpnCidrPrefixVpn:
    Description: Starting portion of VPN network CIDR block.
    Type: String
    Default: '10.200'
    AllowedValues:
      - '10.200'
      - '172.20'

  DockstoreVpnEmail:
    Description: The email address that is used to send clients their client certificate and key.
    Type: AWS::SSM::Parameter::Value<String>
    Default: /DeploymentConfig/dev/DockstoreVpnEmail

  DockstoreVpnEmailPassword:
    Description: The password for DockstoreVpnEmail.
    Type: AWS::SSM::Parameter::Value<String>
    Default: /DeploymentConfig/dev/DockstoreVpnEmailPassword

  CertificateCountry:
    Description: The value to set for the certificate's Country field.
    Type: String
    Default: CA

  CertificateProvince:
    Description: The value to set for the certificate's Province field.
    Type: String
    Default: Ontario

  CertificateCity:
    Description: The value to set for the certificate's City field.
    Type: String
    Default: Toronto

  CertificateOrg:
    Description: The value to set for the certificate's Organization field.
    Type: String
    Default: Dockstore

  CertificateOU:
    Description: The value to set for the certificate's Organizational Unit field.
    Type: String
    Default: Dockstore VPN

  CertificateName:
    Description: The value to set for the certificate's Name field.
    Type: String
    Default: Dockstore OpenVPN Certificate

  CertificateEmail:
    Description: The value to set for the certificate's Email field.
    Type: String
    Default: dockstore@dockstore.org

  OpenVPNPort:
    Description: OpenVPN port number.
    Type: String
    Default: 1194

  OpenVPNProtocol:
    Type: String
    Default: udp
    AllowedValues:
    - udp
    - tcp
    Description: OpenVPN protocol.

Mappings:
  RegionMap:
    us-east-1:  # Northern Virginia
      "ubuntu": "ami-0bcc094591f354be2"  # Ubuntu Server Linux AMI 2018.04-20200810
    us-east-2:  # Ohio
      "ubuntu": "ami-0bbe28eb2173f6167"  # Ubuntu Server Linux AMI 2018.04-20200810
    us-west-1:  # Northern California
      "ubuntu": "ami-0dd005d3eb03f66e8"  # Ubuntu Server Linux AMI 2018.04-20200810
    us-west-2:  # Oregon
      "ubuntu": "ami-0a634ae95e11c6f91"  # Ubuntu Server Linux AMI 2018.04-20200810

Resources:
  DockstoreVpnVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Sub '${DockstoreVpnCidrPrefixVpc}.0.0/16'
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub '${VpcName}-vpc'
        - Key: Owner
          Value: !Sub '${VpnOwner}'

  DockstoreVpnPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref DockstoreVpnVpc
      CidrBlock: !Sub '${DockstoreVpnCidrPrefixVpc}.0.0/24'
      AvailabilityZone:
         Fn::Select:
           - 0
           - Fn::GetAZs: !Ref AWS::Region
      Tags:
      - Key: Name
        Value: !Sub '${VpcName}-subnet'
      - Key: Owner
        Value: !Sub '${VpnOwner}'

  DockstoreVpnInternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${VpcName}-igw'

  DockstoreVpnRTPublic:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref DockstoreVpnVpc
      Tags:
        - Key: Name
          Value: !Sub '${VpcName}-rt'
        - Key: Owner
          Value: !Sub '${VpnOwner}'

  DockstoreVpnAttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref DockstoreVpnVpc
      InternetGatewayId: !Ref DockstoreVpnInternetGateway

  DockstoreVpnRouteDefaultPublic:
    Type: "AWS::EC2::Route"
    DependsOn: DockstoreVpnInternetGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref DockstoreVpnInternetGateway
      RouteTableId: !Ref DockstoreVpnRTPublic

  DockstoreVpnPublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref DockstoreVpnPublicSubnet
      RouteTableId: !Ref DockstoreVpnRTPublic

  DockstoreVpnEIP:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub '${VpcName}-eip'
        - Key: Owner
          Value: !Sub '${VpnOwner}'

  DockstoreVpnSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for OpenVPN Server
      VpcId: !Ref DockstoreVpnVpc
      SecurityGroupIngress:
        # Allow outside connections to VPN
        - IpProtocol: !Ref OpenVPNProtocol
          FromPort: !Ref OpenVPNPort
          ToPort: !Ref OpenVPNPort
          CidrIp: 0.0.0.0/0
        # Reply to pings coming from VPN clients
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: !Join
            - ''
            - - !Sub "${DockstoreVpnCidrPrefixVpn}"
              - ".0.0/24"
      Tags:
        - Key: Name
          Value: !Sub '${VpcName}-sg'
        - Key: Owner
          Value: !Sub '${VpnOwner}'

  DockstoreVpnEC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Tags:
        - Key: Name
          Value: !Sub '${VpcName}-ec2role'
        - Key: Owner
          Value: !Sub '${VpnOwner}'

  DockstoreVpnAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: DockstoreVpnAccessPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          # Grant VPN EC2 permission to associate with an Elastic IP
          - Action:
              - ec2:AssociateAddress
              - ec2:DescribeInstances
            Effect: Allow
            Resource: "*"
          # Grant VPN EC2 permission to read/write to the bucket
          - Effect: Allow
            Action:
              - s3:PutObject
              - s3:DeleteObject
              - s3:GetObject
              - s3:ListBucket
            Resource:
              - Fn::Join:
                - ''
                - - "arn:aws:s3:::"
                  - !Ref DockstoreVpnS3Bucket
              - Fn::Join:
                - ''
                - - "arn:aws:s3:::"
                  - !Ref DockstoreVpnS3Bucket
                  - "/*"
      Roles:
        - !Ref DockstoreVpnEC2InstanceRole

  DockstoreVpnEC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref DockstoreVpnEC2InstanceRole

  DockstoreVpnControlIface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref DockstoreVpnPublicSubnet
      PrivateIpAddress: !Sub '${DockstoreVpnCidrPrefixVpc}.0.10'
      Description: Management Interface
      GroupSet:
        - !Ref DockstoreVpnSG
      SourceDestCheck: true
      Tags:
        - Key: Name
          Value: !Sub '${VpcName}-ctrliface'
        - Key: Owner
          Value: !Sub '${VpnOwner}'

  DockstoreVpnAssociateManagementAccessPort:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt DockstoreVpnEIP.AllocationId
      NetworkInterfaceId: !Ref DockstoreVpnControlIface

  DockstoreVpnS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Name
          Value: !Sub '${VpcName}-vpns3bucket'
        - Key: Owner
          Value: !Sub '${VpnOwner}'

  DockstoreVpnEC2Instance:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: !FindInMap
      - RegionMap
      - !Ref "AWS::Region"
      - ubuntu
      InstanceType: !Ref DockstoreVpnInstanceType
      SourceDestCheck: false
      # Note: security groups are attached to the net iface
      NetworkInterfaces:
      - NetworkInterfaceId: !Ref DockstoreVpnControlIface
        DeviceIndex: 0
      IamInstanceProfile: !Ref DockstoreVpnEC2InstanceProfile
      Monitoring: true
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: 20
            # Setting this flag encypts the volume the next time it is created
            # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-blockdev-template.html#cfn-ec2-blockdev-template-encrypted
            # We could also set the account settings to encrypt any EBS Volume
            # by default https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#encryption-by-default
            Encrypted: true
      Tags:
        - Key: Name
          Value: openvpn-server
        - Key: Owner
          Value: !Sub '${VpnOwner}'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          wget https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb -O /tmp/amazon-cloudwatch-agent.deb
          dpkg -i /tmp/amazon-cloudwatch-agent.deb
          apt-get update
          apt-get -y upgrade
          apt-get -y install python-pip
          pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          sysctl -p
          /usr/local/bin/cfn-init -v --stack ${AWS::StackName} --resource DockstoreVpnEC2Instance --configsets initsetup,openvpn,scriptsuploads --region ${AWS::Region}
          /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource DockstoreVpnEC2Instance --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Count: "1"
        Timeout: PT10M
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          initsetup:
            - "setup_cfn_hup"
            - "install_software"
            - "setup_mailservice"
          openvpn:
            - "generate_secrets"
            - "configure_mfa"
            - "configure_server"
            - "configure_iptables"
            - "configure_custom_client"
            - "start_openvpn_server"
            - "configure_client"
            - "configure_dns"
          scriptsuploads:
            - "script_generate_client"
            - "script_upload_client"
            - "grafana_client"
            - "upload_log"
        setup_cfn_hup:
          files:
            "/etc/cfn/cfn-hup.conf":
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: '000400'
              owner: root
              group: root
            "/etc/cfn/hooks.d/amazon-cloudwatch-agent-auto-reloader.conf":
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.DockstoreVpnEC2Instance.Metadata.AWS::CloudFormation::Init.config_cw_agent
                action=/usr/local/bin/cfn-init -v --stack ${AWS::StackId} --resource DockstoreVpnEC2Instance --region ${AWS::Region} --configsets initsetup,openvpn,scriptsuploads
                runas=root
              mode: '000400'
              owner: root
              group: root
            "/etc/systemd/system/cfn-hup.service":
              content: |
                [Unit]
                Description=cfn-hup daemon
                [Service]
                Type=simple
                ExecStart=/usr/local/bin/cfn-hup
                Restart=always
                [Install]
                WantedBy=multi-user.target
          commands:
            01_enable_cfn_hup:
              command: systemctl enable cfn-hup.service
            02_start_cfn_hup:
              command: systemctl start cfn-hup.service
        install_software:
          packages:
            apt:
              openvpn: []
              unzip: []
          commands:
              01_install_software_install_easyrsa:
                command: wget -qO- https://github.com/OpenVPN/easy-rsa/releases/download/2.2.2/EasyRSA-2.2.2.tgz | tar xvz -C /opt/
              02_install_software_copy_easyrsa:
                command: cp -R /opt/EasyRSA-2.2.2 /opt/easy-rsa
              03_link_openssl_config:
                command: ln -fs /opt/easy-rsa/openssl-1.0.0.cnf /opt/easy-rsa/openssl.cnf
              04_install_software_awscli_download:
                command: curl https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip -o /root/awscliv2.zip
              05_install_software_awscli_install:
                command: unzip -q /root/awscliv2.zip -d /root && sudo /root/aws/install
              06_install_software_awscli_cleanup:
                command: rm -fr /root/aws /root/awscliv2.zip
        setup_mailservice:
          files:
            /etc/postfix/main.cf:
              content: !Sub |
                relayhost = [smtp.gmail.com]:465
                smtp_sasl_auth_enable = yes
                smtp_sasl_password_maps = hash:/etc/postfix/sasl_passwd
                smtp_sasl_security_options = noanonymous
                smtp_tls_CAfile = /etc/postfix/cacert.pem
                smtp_use_tls = yes
                smtp_tls_wrappermode = yes
                smtp_tls_security_level = encrypt
              mode: "000644"
              owner: "root"
              group: "root"
            /etc/postfix/sasl_passwd:
              content: !Sub |
                [smtp.gmail.com]:465    ${DockstoreVpnEmail}:${DockstoreVpnEmailPassword}
              mode: "000400"
              owner: "root"
              group: "root"
          commands:
            01_setup_mailservice_install_mailutils:
              command: DEBIAN_FRONTEND=noninteractive apt-get -y install postfix mailutils
            02_setup_mailservice_postmap_sasl:
              command: postmap /etc/postfix/sasl_passwd
            03_setup_mailservice_cacert:
              # This should be a certificate authority that will be able to verify Gmail's certificate
              command: cat /etc/ssl/certs/thawte_Primary_Root_CA.pem | sudo tee -a /etc/postfix/cacert.pem
            04_setup_mailservice_reload_postfix:
              command: /etc/init.d/postfix reload
        generate_secrets:
          files:
            /opt/easy-rsa/local_vars:
              # This information will be embedded in the server certificate
              content: !Sub |
                export KEY_DIR="/opt/easy-rsa/keys"
                export KEY_CONFIG="/opt/easy-rsa/openssl.cnf"
                export KEY_COUNTRY="${CertificateCountry}"
                export KEY_PROVINCE="${CertificateProvince}"
                export KEY_CITY="${CertificateCity}"
                export KEY_ORG="${CertificateOrg}"
                export KEY_OU="${CertificateOU}"
                export KEY_NAME="${CertificateName}"
                export KEY_EMAIL="${CertificateEmail}"
              mode: "000644"
              owner: "root"
              group: "root"
          commands:
            # The following sequence of commands will generate a server certificate authority
            # and will use that CA to sign a certificate and issue a server key. It will also
            # create a TLS key that clients will use to encrypt their connections.
            01_generate_secrets_clean_keysdir:
              cwd: "/opt/easy-rsa"
              test: "test -e /opt/easy-rsa/clean-all"
              command: ". /opt/easy-rsa/vars;. /opt/easy-rsa/local_vars;/opt/easy-rsa/clean-all"
            02_generate_secrets_update_build-ca:
              # Script complains about missing /root/.rnd, but everything is ok without it
              cwd: "/opt/easy-rsa"
              test: "test -e /opt/easy-rsa/build-ca"
              command: !Sub |
                sed -i 's/--interact//g' /opt/easy-rsa/build-ca
            03_generate_secrets_run_build-ca:
              cwd: "/opt/easy-rsa"
              test: "test -e /opt/easy-rsa/build-ca"
              command: ". /opt/easy-rsa/vars;. /opt/easy-rsa/local_vars;/opt/easy-rsa/build-ca"
            04_generate_secrets_run_build-dh:
              # Note: this can take several minutes
              cwd: "/opt/easy-rsa"
              test: "test -e /opt/easy-rsa/build-dh"
              command: ". /opt/easy-rsa/vars;. /opt/easy-rsa/local_vars;/opt/easy-rsa/build-dh"
            05_generate_secrets_update_build-key-server:
              cwd: "/opt/easy-rsa"
              test: "test -e /opt/easy-rsa/build-key-server"
              command: !Sub |
                sed -i 's/--interact//g' /opt/easy-rsa/build-key-server
            06_generate_secrets_run_build-key-server:
              cwd: "/opt/easy-rsa"
              test: "test -e /opt/easy-rsa/build-key-server"
              command: ". /opt/easy-rsa/vars;. /opt/easy-rsa/local_vars;/opt/easy-rsa/build-key-server server"
            07_generate_secrets_createkeydir:
              cwd: "/opt/easy-rsa"
              command: "mkdir -p /opt/easy-rsa/keys"
            08_generate_secrets_statictlssecret:
              cwd: "/opt/easy-rsa/keys"
              command: "openvpn --genkey --secret statictlssecret.key"
        configure_mfa:
          packages:
            apt:
              qrencode: []
              libqrencode3: []
              libpam-google-authenticator: []
          files:
            /etc/pam.d/openvpn:
              content: !Sub |
                # Try unix username/pw first
                auth sufficient pam_unix.so
                # If that fails, try google authenticator (with same user-provided password)
                auth sufficient /lib/x86_64-linux-gnu/security/pam_google_authenticator.so secret=/etc/openvpn/google-authenticator/${!USER} user=gauth try_first_pass
              mode: "000644"
              owner: "root"
              group: "root"
          commands:
            01_configure_mfa_create_google_auth_user_group:
              # The gauth group handles all creation/management of MFA users
              command: addgroup gauth && useradd -g gauth gauth
            02_configure_mfa_make_mfa_dir:
              # This is the directory where everyone's MFA keys will live (keep it secret! keep it safe!)
              command: mkdir /etc/openvpn/google-authenticator
            03_configure_mfa_chown_mfa_dir:
              command: chown gauth:gauth /etc/openvpn/google-authenticator
            04_configure_mfa_chmod_mfa_dir:
              command: chmod 0700 /etc/openvpn/google-authenticator
        configure_server:
          # Note: this requires setting a private IP address for the EC2 instance
          # VPN IP addresses are in CIDR block ${DockstoreVpnCidrPrefixVpn}.0.0/24
          files:
            /opt/openvpn/server.conf:
              content: !Sub |
                port ${OpenVPNPort}
                proto ${OpenVPNProtocol}
                dev tun
                server ${DockstoreVpnCidrPrefixVpn}.0.0 255.255.255.0
                # use dnsmasq as a DNS server
                push "dhcp-option DNS ${DockstoreVpnCidrPrefixVpn}.0.1"
                # give clients access to VPN IPs
                push "route ${DockstoreVpnCidrPrefixVpn}.0.0 255.255.255.0"
                dh /opt/easy-rsa/keys/dh2048.pem
                # tls auth: act as server
                key-direction 0
                # use pam for auth
                plugin /usr/lib/x86_64-linux-gnu/openvpn/plugins/openvpn-plugin-auth-pam.so openvpn
                # custom client configurations
                client-config-dir /etc/openvpn/clients
                # logs
                log-append /var/log/openvpn.server.log
                # for security, drop to nobody after starting as root
                user nobody
                group nogroup
                # these options are necessary if using nobody/nogroup
                persist-key
                persist-tun
                # keep connections alive if inactive
                keepalive 10 120
                # specify minimum tls version
                tls-version-min 1.2
              mode: "000644"
              owner: "root"
              group: "root"
            /opt/easy-rsa/gen_ovpn_server.sh:
              content: !Sub |
                #!/bin/bash
                # Usage: ./gen_ovpn_server.sh
                set -e
                test -e /opt/openvpn/server.conf || { echo "server config server.conf not found!"; exit 1; }
                test -e /opt/easy-rsa/keys/server.key || { echo "server.key not found!"; exit 1; }
                test -e /opt/easy-rsa/keys/ca.crt || { echo "server certificate ca.crt not found!"; exit 1; }
                (cat /opt/openvpn/server.conf
                echo '<key>'
                cat /opt/easy-rsa/keys/server.key
                echo '</key>'
                echo '<tls-auth>'
                cat /opt/easy-rsa/keys/statictlssecret.key
                echo '</tls-auth>'
                echo '<cert>'
                cat /opt/easy-rsa/keys/server.crt
                echo '</cert>'
                echo '<ca>'
                cat /opt/easy-rsa/keys/ca.crt
                echo '</ca>'
                ) > /etc/openvpn/server.ovpn
              mode: "000700"
              owner: root
              group: root
          commands:
            01_configure_server_sysctl_ipforward:
              # Enable forwarding of packets from one interface to another
              command: echo "net.ipv4.ip_forward = 1" >> /etc/sysctl.conf
            02_configure_server_sysctl_reload:
              command: "sysctl -p"
            03_configure_server_make_client_dir:
              # Make the custom client configuration directory
              command: "mkdir -p /etc/openvpn/clients"
            04_configure_server_make_server_profile:
              # Create the OpenVPN server profile (.ovpn file)
              cwd: "/opt/easy-rsa"
              command: "./gen_ovpn_server.sh"
        configure_iptables:
          packages:
            apt:
              netfilter-persistent: []
          files:
            # This script configures iptables on the OpenVPN server.
            # It sets traffic policies for established connections,
            # pings from VPN clients, DNS for VPN clients, and routing
            # traffic through the VPN properly.
            #
            # Why use iptables if we already have an AWS Security Group?
            # The AWS SG blocks traffic based on port/source IP/dest IP only.
            # AWS SG is a hammer, and iptables is a scalpel.
            /root/iptables_openvpn_dns.sh:
              content: !Sub |
                #!/bin/bash
                # Set default policies
                /sbin/iptables -P INPUT ACCEPT
                /sbin/iptables -P FORWARD ACCEPT
                /sbin/iptables -P OUTPUT ACCEPT
                # Flush and clear everything
                /sbin/iptables -t nat -F
                /sbin/iptables -t mangle -F
                /sbin/iptables -F
                /sbin/iptables -X
                ########### INCOMING ##########
                # Allow any established connection to come in or out
                /sbin/iptables -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT
                /sbin/iptables -A OUTPUT -m state --state RELATED,ESTABLISHED -j ACCEPT
                ########### PING ##############
                # Allow ping requests originating from the VPN
                /sbin/iptables -A INPUT -p icmp --icmp-type echo-request -s ${DockstoreVpnCidrPrefixVpn}.0.0/24 -j ACCEPT
                ########### VPN ###############
                # Allow incoming VPN sessions destined for ${OpenVPNPort}, new or established
                /sbin/iptables -A INPUT -p ${OpenVPNProtocol} --dport ${OpenVPNPort} -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
                # Allow incoming VPN traffic coming from ${OpenVPNPort}, part of established conversation
                /sbin/iptables -A INPUT -p ${OpenVPNProtocol} --sport ${OpenVPNPort} -m conntrack --ctstate ESTABLISHED -j ACCEPT
                ########### DNS ###############
                # Note: this box is running 2 DNS servers:
                # - 127.0.0.53: resolve service (baked into Ubuntu, config at /etc/resolv.conf)
                # - 127.0.0.1: dnsmasq service (used for VPN net, config at /etc/dnsmasq.conf)
                # The DNS iptables rules allow DNS from VPN clients to VPN server, localhost-to-localhost DNS
                # queries, and DNS queries being sent upstream because neither DNS service could resolve them.
                PROTOCOLS="tcp udp"
                for prot in $PROTOCOLS; do
                    # Allow DNS traffic to pass between tun0 and eth0:
                    # - Outgoing packets from tun0 to eth0 on port 53 are masqueraded
                    /sbin/iptables -t nat -A POSTROUTING -p $prot -s ${DockstoreVpnCidrPrefixVpn}.0.0/24 --dport 53 -o eth0 -j MASQUERADE
                    # - Incoming traffic is ok for conversations between tun0 and eth0
                    /sbin/iptables -A FORWARD -p $prot -i eth0 -o tun0 --dport 53 -m state --state ESTABLISHED,RELATED -j ACCEPT
                    # Allow outgoing DNS traffic coming from 53
                    /sbin/iptables -A OUTPUT -p $prot --dport 53 -m state --state NEW,ESTABLISHED -j ACCEPT
                    # Allow incoming DNS traffic coming from 53, part of established conversation
                    /sbin/iptables -A INPUT  -p $prot --sport 53 --dport 1024:65535 -m state --state ESTABLISHED -j ACCEPT
                    # Allow local DNS queries from localhost
                    /sbin/iptables -A INPUT  -p $prot -s 127.0.0.1 -d 127.0.0.53 --dport 53 -m state --state NEW,ESTABLISHED -j ACCEPT
                    /sbin/iptables -A INPUT -p $prot -s 127.0.0.1 -d 127.0.0.1 -j ACCEPT
                    # Allow local DNS queries from VPN network
                    # - From VPN clients to VPN gateway
                    /sbin/iptables -A INPUT  -p $prot -s ${DockstoreVpnCidrPrefixVpn}.0.0/24 -d ${DockstoreVpnCidrPrefixVpn}.0.1 --dport 53 -m state --state NEW,ESTABLISHED -j ACCEPT
                    # - From VPN gateway to loopback interface
                    /sbin/iptables -A INPUT  -p $prot -s ${DockstoreVpnCidrPrefixVpn}.0.1 -d 127.0.0.53 --dport 53 -m state --state NEW,ESTABLISHED -j ACCEPT
                done
                # Uncomment this block to enable logging of dropped packets
                #/sbin/iptables -N LOGGING
                #/sbin/iptables -A INPUT -j LOGGING
                #/sbin/iptables -A LOGGING -m limit --limit 2/min -j LOG --log-prefix "iptables dropped: " --log-level 4
                #/sbin/iptables -A LOGGING -j DROP
              mode: "000700"
              owner: "root"
              group: "root"
          commands:
            01_configure_iptables_apply:
              command: "/root/iptables_openvpn_dns.sh"
        configure_custom_client:
          files:
            "/etc/openvpn/clients/grafana":
              content: !Sub |
                ifconfig-push ${DockstoreVpnCidrPrefixVpn}.0.5 255.255.255.0
        start_openvpn_server:
          commands:
            01_start_openvpn_server_modify_startup_service:
              # This modifies the OpenVPN startup service to look for .ovpn files instead of .conf files
              # (.ovpn files make it simpler to manage cert/CA/TLS key info)
              # Note: the double-backslash is necessary for CloudFormation templates
              command: "sed -i 's+\\.conf+.ovpn+' /lib/systemd/system/openvpn@.service"
            02_start_openvpn_server_start:
              command: "systemctl start openvpn@server.service"
        configure_client:
          files:
            /opt/openvpn/openvpn_client.conf:
              content: !Sub |
                client
                dev tun
                proto ${OpenVPNProtocol}
                remote ${DockstoreVpnEIP} ${OpenVPNPort}
                nobind
                pull
                persist-key
                persist-tun
                remote-cert-tls server
                # tls auth: act as client
                key-direction 1
                auth-user-pass
              mode: "000644"
              owner: "root"
              group: "root"
        configure_dns:
          packages:
            apt:
              dnsmasq: []
          files:
            "/etc/dnsmasq.conf":
              content: !Sub |
                # don't send external traffic that is missing a domain
                domain-needed
                # don't send external traffic that has bogus private ip
                bogus-priv
                # set the local domain
                domain=dockstore.vpn
                # add the local domain to the end of hostnames
                expand-hosts
                # listen on these interfaces
                listen-address=127.0.0.1
                listen-address=${DockstoreVpnCidrPrefixVpn}.0.1
                bind-interfaces
                # define special addresses to resolve
                address=/gateway.dockstore.vpn/${DockstoreVpnCidrPrefixVpn}.0.1
                address=/grafana.dockstore.vpn/${DockstoreVpnCidrPrefixVpn}.0.5
                # define range of IP addresses to hand out
                dhcp-range=${DockstoreVpnCidrPrefixVpn}.0.100,${DockstoreVpnCidrPrefixVpn}.0.200,12h
                # define what to do if no name resolution
                no-resolv
                server=${DockstoreVpnCidrPrefixVpc}.0.1
                server=8.8.8.8
                # send dnsmasq logs to a single place
                log-facility=/var/log/dnsmasq.log
          commands:
            01_configure_dns_enable_dnsmasq:
              command: systemctl enable dnsmasq
            02_configure_dns_start_dnsmasq:
              command: systemctl start dnsmasq
            03a_configure_dns_etc_hosts:
              command: !Sub "echo ${DockstoreVpnCidrPrefixVpn}.0.1 gateway >> /etc/hosts"
            03b_configure_dns_etc_hosts:
              command: !Sub "echo ${DockstoreVpnCidrPrefixVpn}.0.5 grafana >> /etc/hosts"
        script_generate_client:
          packages:
            apt:
              zip: []
          files:
            /opt/easy-rsa/gen_ovpn_client.sh:
              content: !Sub |
                #!/bin/bash
                # Called by gen_client.sh
                # Usage: ./.sh [USERNAME]
                set -e
                test "$#" -eq "1" || { echo "Provide 1 argument (username)"; exit 1; }
                test -e /opt/openvpn/openvpn_client.conf || { echo "client config openvpn_client.conf not found!"; exit 1; }
                test -e /opt/easy-rsa/keys/${!1}.key || { echo "client key ${!1} not found!"; exit 1; }
                test -e /opt/easy-rsa/keys/ca.crt || { echo "server certificate ca.crt not found!"; exit 1; }
                (cat /opt/openvpn/openvpn_client.conf
                echo '<key>'
                cat /opt/easy-rsa/keys/${!1}.key
                echo '</key>'
                echo '<tls-auth>'
                cat /opt/easy-rsa/keys/statictlssecret.key
                echo '</tls-auth>'
                echo '<cert>'
                cat /opt/easy-rsa/keys/${!1}.crt
                echo '</cert>'
                echo '<ca>'
                cat /opt/easy-rsa/keys/ca.crt
                echo '</ca>'
                ) > /opt/easy-rsa/keys/openvpn_${!1}.ovpn
              mode: "000700"
              owner: root
              group: root
            /opt/easy-rsa/zip_client_files.sh:
              content: !Sub |
                #!/bin/bash
                # Called by gen_client.sh
                # Usage: ./zip_client_files.sh [USERNAME]
                # Set the MFA_DISABLED env var to any value to use script for non-MFA clients
                set -e
                test "$#" -eq "1" || { echo "Provide 1 argument (username)"; exit 1; }
                FILES="/opt/easy-rsa/keys/ca.crt
                /opt/easy-rsa/keys/statictlssecret.key
                /opt/easy-rsa/keys/${!1}.key
                /opt/easy-rsa/keys/${!1}.crt
                /opt/easy-rsa/keys/openvpn_${!1}.ovpn
                /opt/easy-rsa/README"
                if [ -z "${!MFA_DISABLED}" ]; then
                    FILES="${!FILES}
                    /etc/openvpn/google-authenticator/${!1}_qr.png
                    /etc/openvpn/google-authenticator/${!1}_backup_codes.txt"
                    cat /opt/easy-rsa/README_MFA > /opt/easy-rsa/README
                else
                    FILES="${!FILES}
                    /opt/easy-rsa/keys/${!1}_password.txt"
                    cat /opt/easy-rsa/README_LOGIN > /opt/easy-rsa/README
                fi
                for fname in ${!FILES}; do
                    test -e ${!fname} || { echo "File ${!fname} not found!"; exit 1; }
                done
                cd /opt/easy-rsa/keys
                zip -j ${!1}.zip $FILES
                rm -f /opt/easy-rsa/README
              mode: "000700"
              owner: root
              group: root
            /opt/easy-rsa/gen_client.sh:
              content: !Sub |
                #!/bin/bash
                # Create new client and files required by new client.
                # Usage: ./gen_client.sh [USERNAME]
                # Set the MFA_DISABLED env var to any value to use script for non-MFA clients
                set -e
                test "$#" -eq "1" || { echo "Provide 1 argument (username)"; exit 1; }
                # Run build-key
                test -e /opt/easy-rsa/build-key || { echo "build-key not found!"; exit 1; }
                test -e /opt/easy-rsa/gen_ovpn_client.sh || { echo "gen_ovpn_client.sh not found!"; exit 1; }
                . /opt/easy-rsa/vars
                . /opt/easy-rsa/local_vars
                /opt/easy-rsa/build-key ${!1}
                # Generate .ovpn profile
                test -e /opt/easy-rsa/keys/${!1}.crt || { echo "client certificate ${!1}.crt not found!"; exit 1; }
                /opt/easy-rsa/gen_ovpn_client.sh ${!1}
                # Register unix user and set a password
                useradd -s /bin/nologin "${!1}"
                if [ -n "${!MFA_DISABLED}" ]; then
                    # Login user needs password
                    head /dev/urandom | tr -dc A-Za-z0-9 | head -c 13 > /opt/easy-rsa/keys/${!1}_password.txt
                    echo "${!1}:$(cat /opt/easy-rsa/keys/${!1}_password.txt)" | chpasswd
                else
                    # MFA user does not need password
                    echo "${!1}:$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 13)" | chpasswd
                    # Generate MFA client info
                    MFA_LABEL="DockstoreVPN"
                    sudo -H -u gauth google-authenticator -t -w3 -e10 -d -r3 -R30 -f -l "${!MFA_LABEL}" -s /etc/openvpn/google-authenticator/${!1} > /etc/openvpn/google-authenticator/${!1}.log
                    # Text file with MFA backup codes
                    tail -n10 /etc/openvpn/google-authenticator/${!1} > /etc/openvpn/google-authenticator/${!1}_backup_codes.txt
                    # Generate QR image
                    AUTH_ID="$( head -n1 /etc/openvpn/google-authenticator/${!1} )"
                    qrencode -o /etc/openvpn/google-authenticator/${!1}_qr.png -d 300 -s 10 "otpauth://totp/${!1}?secret=${!AUTH_ID}&issuer=${!MFA_LABEL}"
                fi
                # Zip up all the client's files
                /opt/easy-rsa/zip_client_files.sh ${!1}
                if [ -n "${!MFA_DISABLED}" ]; then
                    rm -f /opt/easy-rsa/keys/${!1}_password.txt
                fi
                # Upload client zip file to bucket
                test -e /opt/easy-rsa/keys/${!1}.zip || { echo "client zip file ${!1}.zip not found!"; exit 1; }
                BUCKET="${DockstoreVpnS3Bucket}"
                aws s3 cp /opt/easy-rsa/keys/${!1}.zip s3://${!BUCKET}/client/${!1}.zip
              mode: "000700"
              owner: root
              group: root
            /opt/easy-rsa/del_client.sh:
              content: !Sub |
                #!/bin/bash
                # Delete a client by deleting their client files and unix user.
                # Usage: ./del_client.sh [USERNAME]
                set -e
                test "$#" -eq "1" || { echo "Provide 1 argument (username"; exit 1; }
                BUCKET="${DockstoreVpnS3Bucket}"
                . /opt/easy-rsa/vars
                . /opt/easy-rsa/local_vars
                # Delete client openvpn files
                rm -f /opt/easy-rsa/keys/${!1}.zip
                rm -f /opt/easy-rsa/keys/${!1}.key
                rm -f /opt/easy-rsa/keys/openvpn_${!1}.ovpn
                # Delete client MFA files (if they exist)
                rm -f /etc/openvpn/google-authenticator/${!1}
                rm -f /etc/openvpn/google-authenticator/${!1}.log
                rm -f /etc/openvpn/google-authenticator/${!1}_qr.png
                rm -f /etc/openvpn/google-authenticator/${!1}_backup_codes.txt
                # Delete unix user and group
                deluser --remove-home ${!1} || echo "User ${!1} does not exist, continuing"
                groupdel ${!1} || echo "Group ${!1} does not exist, continuing"
                # Revoke client certificate (returns "error 23" and exit status 2 if successful)
                /opt/easy-rsa/revoke-full ${!1} || echo "Certificate revocation complete"
                # Delete client certificate files
                rm -f /opt/easy-rsa/keys/${!1}.csr
                rm -f /opt/easy-rsa/keys/${!1}.crt
                # Delete files from S3 bucket
                aws s3 rm s3://${!BUCKET}/client/${!1}.zip
                # Restart service to kick this client off if they are still connected
                systemctl restart openvpn@server
                echo "User account ${!1} and related VPN files have been deleted"
              mode: "000700"
              owner: root
              group: root
            /opt/easy-rsa/README_LOGIN:
              content: !Sub |
                Dockstore VPN Registration Readme:
                ==================================
                Welcome! This README file explains what the files in this zip file are for and how to connect to the VPN.

                Files:
                - <username>.key - your client key
                - <username>.crt - your client certificate
                - openvpn_<username>.ovpn - your OpenVPN client profile
                - <username>_password.txt - the password you use to connect to the VPN
                - ca.crt - the server certificate
                - statictlssecret.key - the TLS key generated by the server

                Logging into the VPN:
                - Download a VPN client compatible with OpenVPN (on Linux, OpenVPN; on Mac or Windows, OpenVPN Connect or any program you like)
                - Open the OpenVPN profile (openvpn_<username>.ovpn in the zip file) in your VPN client
                - When prompted for a username and password, use the username given to you, and the password in the password file

                Stay secure:
                - Shred your password file once you have stored your password securely
                - Keep your client files secure! Remove read/write access for anyone but yourself, and treat them as sensitive data
                - Connect with the VPN on an as-needed basis
                - Avoid unsafe websites or connections to external or unknown networks when connected to the VPN

                DNS and privacy:
                - This VPN will modify the DNS server that your computer uses, so some of your DNS requests may be routed through the VPN server.
                - DNS (port 53) is the ONLY type of traffic that can egress from the VPN to the outside internet via the OpenVPN server, so
                  if you try to use the OpenVPN server as a proxy, it will fail.
              mode: "000644"
              owner: root
              group: root
            /opt/easy-rsa/README_MFA:
              content: !Sub |
                Dockstore VPN Registration Readme:
                ==================================
                Welcome! This README file explains what the files in this zip file are for and how to connect to the VPN.

                Files:
                - <username>.key - your client key
                - <username>.crt - your client certificate
                - openvpn_<username>.ovpn - your OpenVPN client profile
                - <username>_qr.png - your QR code to register your account in your MFA app
                - <username>_backup_codes.txt - 10 MFA backup codes
                - ca.crt - the server certificate
                - statictlssecret.key - the TLS key generated by the server

                Registering your MFA device:
                - On a phone or tablet, open Google Authenticator or your MFA application of your choice
                - Select the option to add a new MFA token generator
                - Select the option to register via QR code, then scan the QR code image with your phone (for example by opening it on another computer)

                Logging into the VPN:
                - Download a VPN client compatible with OpenVPN (on Linux, OpenVPN; on Mac or Windows, OpenVPN Connect or any program you like)
                - Open the OpenVPN profile (openvpn_<username>.ovpn in the zip file) in your VPN client
                - When prompted for a username and password, use the username given to you, and use the six-digit MFA token as the password

                Stay secure:
                - Keep your client files secure! Remove read/write access for anyone but yourself, and treat them as sensitive data
                - Connect with the VPN on an as-needed basis
                - Avoid unsafe websites or connections to external or unknown networks when connected to the VPN

                DNS and privacy:
                - This VPN will modify the DNS server that your computer uses, so some of your DNS requests may be routed through the VPN server.
                - DNS (port 53) is the ONLY type of traffic that can egress from the VPN to the outside internet via the OpenVPN server, so
                  if you try to use the OpenVPN server as a proxy, it will fail.
              mode: "000644"
              owner: root
              group: root
          commands:
            01_generate_client_script_update_build-key:
              cwd: "/opt/easy-rsa"
              test: "test -e /opt/easy-rsa/build-key"
              command: !Sub |
                sed -i 's/--interact//g' /opt/easy-rsa/build-key
            02_generate_client_update_build-key:
              cwd: "/opt/easy-rsa"
              command: sed -i 's+export EASY_RSA=.*+export EASY_RSA="/opt/easy-rsa"+' /opt/easy-rsa/build-key
            03_generate_client_script_make_client_config_dir:
              command: mkdir -p /etc/openvpn/clients
        script_upload_client:
          files:
            /opt/easy-rsa/email_presigned_url.sh:
              content: !Sub |
                #!/bin/bash
                # Usage: ./email_presigned_url.sh [USERNAME] [USEREMAIL]
                set -e
                test "$#" -eq "2" || { echo "Provide 2 arguments (username, useremail)"; exit 1; }
                DAYS="3"
                SECONDS=$( echo "${!DAYS} * 24 * 60 * 60" | bc )
                BUCKET="${DockstoreVpnS3Bucket}"
                # Create presigned URL to bucket file
                aws s3 presign s3://${!BUCKET}/client/${!1}.zip --expires-in ${!SECONDS} > /opt/easy-rsa/url
                # Email presigned URL to user
                python3 /opt/easy-rsa/email_presigned_url.py ${!1} ${!2} ${!DAYS}
                rm -f /opt/easy-rsa/url
              mode: "000700"
              owner: root
              group: root
            /opt/easy-rsa/.dockstore_vpn_email:
              content: !Sub |
                ${DockstoreVpnEmail}
              mode: "000600"
              owner: root
              group: root
            /opt/easy-rsa/.dockstore_vpn_email_password:
              content: !Sub |
                ${DockstoreVpnEmailPassword}
              mode: "000600"
              owner: root
              group: root
            /opt/easy-rsa/email_presigned_url.py:
              content: !Sub |
                import os, sys, smtplib, traceback
                username, to_addr, expires = sys.argv[1], sys.argv[2], sys.argv[3]
                with open('/opt/easy-rsa/.dockstore_vpn_email', 'r') as f:
                    gmail_user = f.read().strip()
                with open('/opt/easy-rsa/.dockstore_vpn_email_password', 'r') as f:
                    gmail_password = f.read().strip()
                with open('/opt/easy-rsa/url', 'r') as f:
                    url = f.read().strip()
                sent_from = "Dockstore VPN <{}>".format(gmail_user)
                to = [to_addr]
                subject = 'Dockstore VPN Registration'
                body = '''A username (%s) has been created for you on the Dockstore VPN network.

                The URL below links to a zip file with all files needed to register your two-factor device and connect to the Dockstore VPN.

                See the README file in the zip file for more information.

                %s

                This link will expire in %s days.
                '''%(username, url, expires)
                message = "From: {}\nTo: {}\nSubject: {}\n\n{}".format(sent_from, to_addr, subject, body)
                try:
                    server = smtplib.SMTP_SSL('smtp.gmail.com', 465)
                    server.ehlo()
                    server.login(gmail_user, gmail_password)
                    server.sendmail(sent_from, to, message)
                    server.close()
                    print('Email sent!')
                except:
                    print('Something went wrong...')
                    traceback.print_exc()
              mode: "000600"
              owner: root
              group: root
        grafana_client:
          commands:
            # Run commands to create a grafana client and email presigned URL to dockstorevpn@gmail.com
            01_grafana_client_gen_client:
              command: "export MFA_DISABLED='true'; cd /opt/easy-rsa && /opt/easy-rsa/gen_client.sh grafana"
            02_grafana_client_upload_zip:
              command: "export MFA_DISABLED='true'; cd /opt/easy-rsa && /opt/easy-rsa/email_presigned_url.sh grafana dockstorevpn@gmail.com"
        upload_log:
          commands:
            # Upload the CloudFormation initialization log to the S3 bucket
            01_upload_log_s3cp_cfn_init_log:
              cwd: "/var/log"
              test: "test -e /var/log/cfn-init.log"
              command: !Sub |
                aws s3 cp /var/log/cfn-init.log s3://${DockstoreVpnS3Bucket}/log/cfn-init.log

Outputs:
  VpnBucketName:
    Description: UUID for the S3 bucket
    Value: !Ref DockstoreVpnS3Bucket
    Export:
      Name: !Sub '${AWS::StackName}-VpnBucketName'
  VpnCidrPrefix:
    Description: Prefix (first 2 octets) of private VPN IP address space.
    Value: !Ref DockstoreVpnCidrPrefixVpn
    Export:
      Name: !Sub '${AWS::StackName}-VpnCidrPrefix'
  Eip:
    Description: Dockstore VPN Server Elastic IP
    Value: !Ref DockstoreVpnEIP
    Export:
      Name: !Sub '${AWS::StackName}-Eip'
